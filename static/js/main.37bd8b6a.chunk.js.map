{"version":3,"sources":["components/Square.js","components/Board.js","components/History.js","components/StatusMessage.js","App.js","helpers.js","index.js"],"names":["Square","value","onClick","isWinningSquare","type","className","Board","board","handleSquareClick","winningSquares","renderSquare","position","includes","History","history","moveTo","currentMove","map","_","move","StatusMessage","winner","current","noMovesLeft","every","el","isXNext","NEW_GAME","Array","fill","App","useState","setHistory","setCurrentMove","squares","lines","i","length","a","b","c","calculateWinner","prev","last","newBoard","square","pos","concat","style","fontWeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37bd8b6a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = ({ value, onClick, isWinningSquare }) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={onClick}\r\n      className={`square ${isWinningSquare ? 'winning' : ''} ${\r\n        value === 'X' ? 'text-green' : 'text-orange'\r\n      }`}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst Board = ({ board, handleSquareClick, winningSquares }) => {\r\n  const renderSquare = position => {\r\n    const isWinningSquare = winningSquares.includes(position);\r\n\r\n    return (\r\n      <Square\r\n        value={board[position]}\r\n        onClick={() => handleSquareClick(position)}\r\n        isWinningSquare={isWinningSquare}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;","import React from \"react\";\r\n\r\nconst History = ({ history, moveTo, currentMove }) => {\r\n  return (\r\n    <div className=\"history-wrapper\">\r\n\r\n    <ul className=\"history\">\r\n      {history.map((_, move) => {\r\n        return (\r\n          <li key={move}>\r\n            <button\r\n              className={`btn-move ${move === currentMove ? 'active' : ''}`}\r\n              type=\"button\"\r\n              onClick={() => {\r\n                moveTo(move);\r\n              }}\r\n            >\r\n              {move === 0 ? `Go to game start ` : `Go to move #${move}`}\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","import React from \"react\";\r\n\r\nconst StatusMessage = ({ winner, current }) => {\r\n  const noMovesLeft = current.board.every((el) => el !== null);\r\n\r\n  return (\r\n    <div className=\"status-message\">\r\n      {winner && (\r\n        <>\r\n          Winner is{' '}\r\n          <span className={winner === 'X' ? 'text-green' : 'text-orange'}>\r\n            {winner}\r\n          </span>\r\n        </>\r\n      )}\r\n      {!winner && !noMovesLeft && (\r\n        <>\r\n          Next player is{' '}\r\n          <span className={current.isXNext ? 'text-green' : 'text-orange'}>\r\n            {current.isXNext ? 'X' : '0'}\r\n          </span>\r\n        </>\r\n      )}\r\n      {!winner && noMovesLeft && (\r\n        <>\r\n          <span className=\"text-green\">X</span> and{' '}\r\n          <span className=\"text-orange\">0</span> tied\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatusMessage;\r\n","import React, { useState }from 'react';\nimport Board from './components/Board';\nimport History from './components/History';\nimport StatusMessage from './components/StatusMessage';\nimport { calculateWinner } from './helpers';\nimport \"./styles/root.scss\";\n\n  const NEW_GAME = [\n    {board: Array(9).fill(null), isXNext: true},\n  ]\n\n  const App = () => {\n  \n  const [history, setHistory] = useState(NEW_GAME);\n  const [currentMove, setCurrentMove] = useState(0);\n  const current = history[currentMove];\n\n  const { winner, winningSquares } = calculateWinner(current.board);\n  \n\n  const handleSquareClick = (position) => {\n      if(current.board[position] || winner){\n          return;\n      }\n\n      setHistory((prev) => {\n          const last = prev[prev.length - 1];\n\n          const newBoard = last.board.map((square, pos) => {\n              if(pos === position){\n                  return last.isXNext ? 'X' : '0';\n              }\n              return square;\n          });\n          return prev.concat({ board: newBoard, isXNext: !last.isXNext })\n      });\n      setCurrentMove(prev => prev + 1);\n  };\n\n  const moveTo = move => {\n    setCurrentMove(move);\n  };\n\n  const onNewGame = () => {\n    setHistory(NEW_GAME);\n    setCurrentMove(0);\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 >\n        TIC<span className=\"text-green\"> TAC </span>TOE\n      </h1>\n      <StatusMessage winner={winner} current={current} />\n        <Board\n          board={current.board} \n          handleSquareClick={handleSquareClick} winningSquares={winningSquares}\n        />\n        <button type=\"button\" onClick={onNewGame} className={`btn-reset ${winner ? 'active' : ''}`}>\n          Start new game\n        </button>\n        <h2 style={{fontWeight: 'normal'}}>Current Game History</h2>\n        <History history={history} moveTo={moveTo} currentMove={currentMove}/>\n        <div className=\"bg-balls\" />\n    </div>\n  );\n};\n\nexport default App;\n","export function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        // return squares[a];\r\n        return {\r\n          winner: squares[a],\r\n          winningSquares: [a, b, c],\r\n        };\r\n      }\r\n    }\r\n    return {\r\n      winner: null,\r\n      winningSquares: [],\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}